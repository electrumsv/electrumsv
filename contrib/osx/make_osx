#!/bin/bash

build_dir=$(dirname "$0")
test -n "$build_dir" -a -d "$build_dir" || exit

. "$build_dir"/base.sh # functions we use below

cd $build_dir/../..

export PYTHONHASHSEED=22

# Paramterize
PYTHON_VERSION=3.6.4
BUILDDIR=/tmp/electrum-sv-build
PACKAGE=ElectrumSV
GIT_REPO_ACCT=https://github.com/electrumsv
GIT_REPO=$GIT_REPO_ACCT/electrumsv
LIBSECP_VERSION=452d8e4d2a2f9f1b5be6b02e18f1ba102e5ca0b4

which xcodebuild > /dev/null 2>&1 || fail "Please install Xcode and xcode command line tools to continue"

which msgfmt > /dev/null 2>&1 || fail "Please install xgettext.  For brew users: brew install gettext && brew link gettext --force"

# Code Signing: See https://developer.apple.com/library/archive/documentation/Security/Conceptual/CodeSigningGuide/Procedures/Procedures.html
APP_SIGN=""
if [ -n "$1" ]; then
    # Test the identity is valid for signing by doing this hack. There is no other way to do this.
    cp -f /bin/ls ./CODESIGN_TEST
    codesign -s "$1" --dryrun -f ./CODESIGN_TEST > /dev/null 2>&1
    res=$?
    rm -f ./CODESIGN_TEST
    if ((res)); then
        fail "Code signing identity \"$1\" appears to be invalid."
    fi
    unset res
    APP_SIGN="$1"
    info "Code signing enabled using identity \"$APP_SIGN\""
else
    warn "Code signing DISABLED. Specify a valid macOS Developer identity installed on the system as the first argument to this script to enable signing."
fi


info "Installing Python $PYTHON_VERSION"
export PATH="~/.pyenv/bin:~/.pyenv/shims:$PATH"
if [ -d "~/.pyenv" ]; then
  pyenv update
else
  curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash > /dev/null 2>&1
fi
PYTHON_CONFIGURE_OPTS="--enable-framework" pyenv install -s $PYTHON_VERSION && \
pyenv global $PYTHON_VERSION || \
fail "Unable to use Python $PYTHON_VERSION"

rm -rf ./dist

git submodule init
git submodule update

rm  -rf $BUILDDIR > /dev/null 2>&1
mkdir $BUILDDIR

info "Activating virtualenv $BUILDDIR/venv"
python3 -m venv $BUILDDIR/venv
source $BUILDDIR/venv/bin/activate

info "Installing pyinstaller"
python3 -m pip install pyinstaller -I || fail "Could not install pyinstaller"

info "Using these versions for building $PACKAGE:"
sw_vers
python3 --version

info "Installing requirements..."
python3 -m pip install -Ir ./contrib/deterministic-build/requirements.txt && \
python3 -m pip install -Ir ./contrib/deterministic-build/requirements-binaries.txt || \
fail "Could not install requirements"

info "Installing hardware wallet requirements..."
python3 -m pip install -Ir ./contrib/deterministic-build/requirements-hw.txt || \
fail "Could not install hardware wallet requirements"

info "Building libsecp256k1"
brew install autoconf automake libtool
git clone https://github.com/bitcoin-core/secp256k1 $BUILDDIR/secp256k1
pushd $BUILDDIR/secp256k1
git reset --hard $LIBSECP_VERSION
git clean -f -x -q
./autogen.sh
./configure --enable-module-recovery --enable-experimental --enable-module-ecdh --disable-jni
make
popd
cp $BUILDDIR/secp256k1/.libs/libsecp256k1.0.dylib contrib/osx
DoCodeSignMaybe "libsecp256k1" "contrib/osx/libsecp256k1.0.dylib" "$APP_SIGN"

info "Building CalinsQRReader..."
d=contrib/osx/CalinsQRReader
pushd $d
rm -fr build
xcodebuild || fail "Could not build CalinsQRReader"
popd
DoCodeSignMaybe "CalinsQRReader.app" "${d}/build/Release/CalinsQRReader.app" "$APP_SIGN"

info "Installing $PACKAGE..."
python3 -m pip install . > /dev/null || fail "Could not build $PACKAGE"

# --dirty: If there are local modifications, add the '-dirty' text.
# --always: If we are not directly on a tag, add the abbreviated commit.
# --match: Only consider tags matching the given pattern.
# e.g. "sv-1.1.0-12-f3d2d22" (12 commits past tag, and on commit f3d2d22)
RAW_VERSION=`git describe --tags --dirty --always --match sv-*`
# Strip the leading 3 characters from the description, 'sv-1.1.0' -> '1.1.0' (the release version).
VERSION=${RAW_VERSION:3}

info "Using Pyinstaller to build $PACKAGE version $VERSION"
pyinstaller --noconfirm --ascii contrib/osx/osx.spec || fail "Could not build binary"

info "Adding bitcoin URI types to Info.plist"
plutil -insert 'CFBundleURLTypes' \
	-xml '<array><dict> <key>CFBundleURLName</key> <string>bitcoin</string> <key>CFBundleURLSchemes</key> <array><string>bitcoin</string></array> </dict></array>' \
	-- dist/$PACKAGE.app/Contents/Info.plist \
	|| fail "Could not add keys to Info.plist. Make sure the program 'plutil' exists and is installed."

DoCodeSignMaybe "app bundle" "dist/${PACKAGE}.app" "$APP_SIGN"

info "Creating .DMG"
dmgbuild -D PACKAGE=$PACKAGE -s contrib/osx/dmg-settings.py "" dist/$PACKAGE-$VERSION.dmg || fail "Could not create .DMG"

DoCodeSignMaybe ".DMG" "dist/${PACKAGE}-${VERSION}.dmg" "$APP_SIGN"

if [ -z "$APP_SIGN" ]; then
    warn "App was built successfully but was not code signed."
    warn "To sign, specify a valid code signing identity as the first argument to this script."
fi
