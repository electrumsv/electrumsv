# - Unable to get the prefix wildcard to work in the trigger branch include list, e.g. 'release-*' or 'release*' is invalid.
#   - Microsoft appear to force a branch naming based on '/', e.g. 'release/*' okay, 'release-*' not okay.
#   - This means that as we make new major level releases we will have to manually add those branches (or adopt Microsoft's policy).
# - 'failOnStdErr' flags unimportant things that are written to stderr, so cannot easily be enabled.
#   - This means that if one command fails it will proceed onto the next and fail that.
# - The Wine build docker image is specified by hash, with the intent that it ensures that what we get is what we uploaded to Docker Hub.
#   - Also tying it to the hash, ensures historical reproducibility and failure will be indicated by Docker image availability.

trigger:
  branches:
    include:
      - master

pr:
  - master

jobs:
- job: ValidateCommit
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - script: |
      python3 -m pip install -U pip setuptools
      sudo apt-get install libusb-dev
      PATH=/home/vsts/.local/bin:$PATH
      python3 -m pip install --user -r contrib/deterministic-build/requirements.txt
      python3 -m pip install --user -r contrib/deterministic-build/requirements-hw.txt
      python3 -m pip install --user -U pylint
      python3 -m pylint --rcfile .pylintrc electrum-sv electrumsv
      if [ $? -gt 0 ]
      then
        # https://docs.pylint.org/en/1.6.0/run.html#exit-codes
        echo "##vso[task.complete result=Failed;]DONE"
      fi
- job: Preparation
  pool:
    vmImage: 'ubuntu-16.04'
  dependsOn:
  - ValidateCommit
  steps:
  - script: |
      MOST_RECENT_TAG=`git describe --tags --abbrev=0 --match sv-*`
      RX_VERSION='^[0-9]+\.[0-9]+\.[0-9]+[ab]{1}[0-9]+$'
      if [[ ${MOST_RECENT_TAG:3} =~ $RX_VERSION ]]
      then
        echo "##vso[build.addbuildtag]COMMIT_TAGGED"
        echo "vso[task.setvariable variable=TAG_UNSTABLE;isOutput=true]yes"
        echo "##vso[task.setvariable variable=TAG_UNSTABLE;isOutput=true]yes"
      else
        echo "##vso[build.addbuildtag]COMMIT_UNTAGGED"
        echo "vso[task.setvariable variable=TAG_UNSTABLE;isOutput=true]no"
        echo "##vso[task.setvariable variable=TAG_UNSTABLE;isOutput=true]no"
      fi
      TAGGED_COMMIT=`git rev-list -n 1 ${MOST_RECENT_TAG}`
      # Only set this flag if the commit is on the tag.
      if [ "$(Build.SourceVersion)" == "$TAGGED_COMMIT" ]
      then
        echo "vso[task.setvariable variable=COMMIT_TAGGED;isOutput=true]yes"
        echo "##vso[task.setvariable variable=COMMIT_TAGGED;isOutput=true]yes"
        echo "vso[task.setvariable variable=COMMIT_TAG;isOutput=true]${MOST_RECENT_TAG}"
        echo "##vso[task.setvariable variable=COMMIT_TAG;isOutput=true]${MOST_RECENT_TAG}"
      else
        echo "vso[task.setvariable variable=COMMIT_TAGGED;isOutput=true]no"
        echo "##vso[task.setvariable variable=COMMIT_TAGGED;isOutput=true]no"
        echo "vso[task.setvariable variable=COMMIT_TAG;isOutput=true]"
        echo "##vso[task.setvariable variable=COMMIT_TAG;isOutput=true]"
      fi
      echo "Commit description = $TAGGED_COMMIT"
      echo "Commit closest tag = $MOST_RECENT_TAG"
      echo "Commit source version = $(Build.SourceVersion)"
      echo "Commit source branch = $(Build.SourceBranch)"
      echo "Commit build reason = $(Build.Reason)"
    name: exportVars
    displayName: Export commit tag for dependent tasks
    enabled: true
    continueOnError: false
    failOnStderr: true
- job: BuildLinuxBasedWindows
  dependsOn:
  - Preparation
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: 3.6
      addToPath: true
      architecture: x64
  - script: |
      sudo docker pull $(imageName)
      sudo docker run --name electrumsv-wine-builder-cont -v $PWD:/opt/wine64/drive_c/electrum --rm --workdir /opt/wine64/drive_c/electrum/contrib/build-wine $(imageName) ./build.sh
    displayName: 'Windows build'
    enabled: true
    continueOnError: false
    failOnStderr: false
  - task: CopyFiles@2
    inputs:
      contents: contrib/build-wine/dist/?(*.exe|*.txt)
      targetFolder: $(Build.ArtifactStagingDirectory)
      flattenFolders: true
      OverWrite: true
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'build-files-intermediate-windows'
      targetPath: $(Build.ArtifactStagingDirectory)
  variables:
    imageName: 'docker.io/electrumsv/electrumsv-wine-builder-img@sha256:8274d555237fc569f032006eccb7d76c1e2e4c9d9ca420d98a00efb527cce46e'
- job: BuildPythonPackages
  dependsOn:
  - Preparation
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: 3.6
      addToPath: true
      architecture: x64
  - script: |
      sudo pip3 install --upgrade pip setuptools wheel
      ./contrib/make_packages
      ./contrib/make_tgz
    displayName: 'Build Python packages'
    enabled: true
    continueOnError: false
    failOnStderr: false
  - task: CopyFiles@2
    inputs:
      contents: dist/?(*.zip|*.gz)
      targetFolder: $(Build.ArtifactStagingDirectory)
      flattenFolders: true
      OverWrite: true
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'build-files-intermediate-packages'
      targetPath: $(Build.ArtifactStagingDirectory)
- job: BuildMacOS10_14
  dependsOn:
  - Preparation
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: 3.6
      addToPath: true
      architecture: x64
  - script: |
      # Calin's QR reader requires SDK 10.14, which is not available in the default Xcode version.
      /bin/bash -c "sudo xcode-select -s /Applications/Xcode_10.1.app/Contents/Developer"
      sudo pip3 install --upgrade pip setuptools wheel
      brew install gettext && brew link gettext --force
      ./contrib/osx/make_osx
    enabled: true
    continueOnError: false
    failOnStderr: false
    displayName: 'Build MacOS binaries'
  - task: CopyFiles@2
    inputs:
      contents: dist/?(*.dmg|*.txt)
      targetFolder: $(Build.ArtifactStagingDirectory)
      flattenFolders: true
      OverWrite: true
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'build-files-intermediate-macos'
      targetPath: $(Build.ArtifactStagingDirectory)
- job: ProcessArtifacts
  pool:
    vmImage: 'ubuntu-16.04'
  dependsOn:
    - BuildLinuxBasedWindows
    - BuildPythonPackages
    - BuildMacOS10_14
    - Preparation
  variables:
    COMMIT_TAG: $[dependencies.Preparation.outputs['exportVars.COMMIT_TAG']]
    COMMIT_TAGGED: $[dependencies.Preparation.outputs['exportVars.COMMIT_TAGGED']]
    TAG_UNSTABLE: $[dependencies.Preparation.outputs['exportVars.TAG_UNSTABLE']]
  steps:
  - checkout: none
  - script: |
      echo "Commit COMMIT_TAG = $(COMMIT_TAG)"
      echo "Commit COMMIT_TAGGED = $(COMMIT_TAGGED)"
      echo "Commit TAG_UNSTABLE = $(TAG_UNSTABLE)"
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'build-files-intermediate-windows'
      targetPath: $(Build.ArtifactStagingDirectory)
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'build-files-intermediate-packages'
      targetPath: $(Build.ArtifactStagingDirectory)
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'build-files-intermediate-macos'
      targetPath: $(Build.ArtifactStagingDirectory)
  - script: |
      cd $(Build.ArtifactStagingDirectory)
      sha256sum * > build-hashes.txt
    enabled: true
    continueOnError: false
    failOnStderr: false
    displayName: 'Collect build artifacts'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'build-files'
      targetPath: $(Build.ArtifactStagingDirectory)
  # This requires an extra github access token added. It's a lot of hassle and it's likely better
  # to just use the API and do it externally and manually.
  # - task: GitHubRelease@0
  #   inputs:
  #     gitHubConnection: github-releases
  #     repositoryName: rt121212121/electrumsv
  #     tag: $(COMMIT_TAG)
  #     tagSource: 'auto'
  #     isPreRelease: true
  #     target: $(Build.SourceVersion)
  #     addChangeLog: true
  #   enabled: true
  #   condition: |
  #     and(
  #       succeeded(),
  #       eq(variables['Build.Reason'], 'Manual'),
  #       eq(variables['Build.SourceBranch'], 'refs/heads/master'),
  #       eq(variables['COMMIT_TAGGED'], 'yes'),
  #       startsWith(variables['COMMIT_TAG'], 'sv-'),
  #       eq(variables['TAG_UNSTABLE'], 'yes')
  #     )
