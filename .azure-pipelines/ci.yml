# - Unable to get the prefix wildcard to work in the trigger branch include list, e.g. 'release-*' or 'release*' is invalid.
#   - Microsoft appear to force a branch naming based on '/', e.g. 'release/*' okay, 'release-*' not okay.
#   - This means that as we make new major level releases we will have to manually add those branches (or adopt Microsoft's policy).
# - 'failOnStdErr' flags unimportant things that are written to stderr, so cannot easily be enabled.
#   - This means that if one command fails it will proceed onto the next and fail that.
# - The Wine build docker image is specified by hash, with the intent that it ensures that what we get is what we uploaded to Docker Hub.
#   - Also tying it to the hash, ensures historical reproducibility and failure will be indicated by Docker image availability.

trigger:
  branches:
    include:
      - master
      - develop
      - releases/*
      - features/*
  paths:
    exclude: [ 'README.md', 'docs' ]

pr:
  - master
  - releases/*
  - features/*

variables:
- group: electrumsv-variables
- name: wine-build-image
  value: $[variables.wine_build_image]

stages:
- stage: 'Test'
  displayName: 'Test ElectrumSV'
  jobs:

  - job: Pylint
    displayName: Pylint Static Analysis
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - template: prepare-general-environment.yml
      parameters:
        pythonVersion: '3.10'
    - template: run_pylint_static_analysis.yml
      parameters:
        pythonVersion: '3.10'

  - job: Mypy
    displayName: Mypy Static Analysis
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - template: prepare-general-environment.yml
        parameters:
          pythonVersion: '3.10'
      - template: run_mypy_static_analysis.yml
        parameters:
          pythonVersion: '3.10'

  - job: MainUnittests
    displayName: Main Unittests (Python 3.10)
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - template: prepare-general-environment.yml
        parameters:
          pythonVersion: '3.10'
      - template: run_main_unittests.yml
        parameters:
          pythonVersion: '3.10'

  - job: RESTAPIUnittests
    displayName: REST API tests (Python 3.10)
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - template: prepare-general-environment.yml
        parameters:
          pythonVersion: '3.10'
      - template: run_restapi_unittests.yml
        parameters:
          pythonVersion: '3.10'

  - job: TestFunctional
    displayName: Functional tests (Python 3.10)
    pool:
      vmImage: 'ubuntu-latest'

    variables:
        SDK_HOME_DIR:           $(Agent.HomeDirectory)/portable_sdk_datadir
        NEW_LOG_DIR:            $(Agent.HomeDirectory)/portable_sdk_datadir/logs
        SDK_LOG_LEVEL:          DEBUG
        SDK_POSTGRES_PORT:      55432

    steps:
      - template: prepare-general-environment.yml
        parameters:
          pythonVersion: '3.10'
      - template: run_functional_tests.yml
        parameters:
          pythonVersion: '3.10'


- stage: 'Build'
  displayName: 'Build ElectrumSV'
  dependsOn: []  # removes implicit dependency on previous stage and causes this to run in parallel
  jobs:
  - job: Preparation
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        COMMIT_REVISION=$(Build.SourceVersion)
        COMMIT_KEY=${COMMIT_REVISION:0:8}
        MOST_RECENT_TAG=`git describe --tags --abbrev=0 --match sv-*`
        RX_VERSION='^[0-9]+\.[0-9]+\.[0-9]+[ab]{1}[0-9]+$'
        if [[ ${MOST_RECENT_TAG:3} =~ $RX_VERSION ]]
        then
          # This causes errors in pull requests.
          if [ "$(Build.Reason)" != "PullRequest" ]
          then
            echo "##vso[build.addbuildtag]UNSTABLE_BUILD"
          fi
          echo "vso[task.setvariable variable=TAG_UNSTABLE;isOutput=true]yes"
          echo "##vso[task.setvariable variable=TAG_UNSTABLE;isOutput=true]yes"
        else
          # This causes errors in pull requests.
          if [ "$(Build.Reason)" != "PullRequest" ]
          then
            echo "##vso[build.addbuildtag]STABLE_BUILD"
          fi
          echo "vso[task.setvariable variable=TAG_UNSTABLE;isOutput=true]no"
          echo "##vso[task.setvariable variable=TAG_UNSTABLE;isOutput=true]no"
        fi

        TAGGED_COMMIT=`git rev-list -n 1 ${MOST_RECENT_TAG}`
        # Only set this flag if the commit is on the tag.
        if [ "$(Build.SourceVersion)" == "$TAGGED_COMMIT" ]
        then
          if [ "$(Build.Reason)" != "PullRequest" ]
          then
            echo "##vso[build.addbuildtag]TAGGED_BUILD"
          fi

          RELEASE_KEY=${MOST_RECENT_TAG:3}
          echo "vso[task.setvariable variable=COMMIT_TAGGED;isOutput=true]yes"
          echo "##vso[task.setvariable variable=COMMIT_TAGGED;isOutput=true]yes"
          echo "vso[task.setvariable variable=COMMIT_TAG;isOutput=true]${MOST_RECENT_TAG}"
          echo "##vso[task.setvariable variable=COMMIT_TAG;isOutput=true]${MOST_RECENT_TAG}"
        else
          if [ "$(Build.Reason)" != "PullRequest" ]
          then
            echo "##vso[build.addbuildtag]UNTAGGED_BUILD"
          fi

          RELEASE_KEY=${MOST_RECENT_TAG:3}-${COMMIT_KEY}
          echo "vso[task.setvariable variable=COMMIT_TAGGED;isOutput=true]no"
          echo "##vso[task.setvariable variable=COMMIT_TAGGED;isOutput=true]no"
          echo "vso[task.setvariable variable=COMMIT_TAG;isOutput=true]"
          echo "##vso[task.setvariable variable=COMMIT_TAG;isOutput=true]"
        fi
        echo "vso[task.setvariable variable=RELEASE_KEY;isOutput=true]${RELEASE_KEY}"
        echo "##vso[task.setvariable variable=RELEASE_KEY;isOutput=true]${RELEASE_KEY}"

        echo "RELEASE_KEY = $RELEASE_KEY"
        echo "Commit description = $TAGGED_COMMIT"
        echo "Commit closest tag = $MOST_RECENT_TAG"
        echo "Commit source version = $(Build.SourceVersion)"
        echo "Commit source branch = $(Build.SourceBranch)"
        echo "Commit build reason = $(Build.Reason)"
      name: exportVars
      displayName: Export commit tag for dependent tasks
      enabled: true
      continueOnError: false
      failOnStderr: true
  - job: BuildLinuxBasedWindows
    dependsOn:
    - Preparation
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: 3.10
        addToPath: true
        architecture: x64
    - script: |
        sudo docker pull -q $(wine-build-image)
        sudo docker run --name electrumsv-wine-build-container -v $PWD:/opt/wine64/drive_c/electrum -e PYI_SKIP_TAG="$PYI_SKIP_TAG" --rm --workdir /opt/wine64/drive_c/electrum/contrib/build-wine $(wine-build-image) ./build.sh
      displayName: 'Windows build'
      enabled: true
      continueOnError: false
      failOnStderr: false
    - task: CopyFiles@2
      inputs:
        contents: contrib/build-wine/dist/?(*.exe|*.txt|*.dll)
        targetFolder: $(Build.ArtifactStagingDirectory)
        flattenFolders: true
        OverWrite: true
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'build-windows'
        targetPath: $(Build.ArtifactStagingDirectory)
  - job: BuildSourceArchive
    dependsOn:
    - Preparation
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: 3.10
        addToPath: true
        architecture: x64
    - script: |
        export PYTHONPATH=.
        python3 contrib/make_source_archives.py
      displayName: 'Build source archives'
      enabled: true
      continueOnError: false
      failOnStderr: false
    - task: CopyFiles@2
      inputs:
        contents: dist/?(*.zip|*.gz)
        targetFolder: $(Build.ArtifactStagingDirectory)
        flattenFolders: true
        OverWrite: true
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'build-source'
        targetPath: $(Build.ArtifactStagingDirectory)
  - job: BuildDocumentationArchive
    dependsOn:
    - Preparation
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      RELEASE_KEY: $[dependencies.Preparation.outputs['exportVars.RELEASE_KEY']]
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: 3.10
        addToPath: true
        architecture: x64
    - script: |
        pushd docs/standalone
        python3 -m pip install -r requirements.txt
        make html
        popd
      displayName: 'Build documentation archives'
      enabled: true
      continueOnError: false
      failOnStderr: false
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'docs/standalone/_build/html'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/ElectrumSV-$(RELEASE_KEY)-docs.zip'
        replaceExistingArchive: true
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'build-documentation'
        targetPath: $(Build.ArtifactStagingDirectory)
  - job: BuildMacOS11
    dependsOn:
    - Preparation
    pool:
      vmImage: 'macOS-11'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: 3.10
        addToPath: true
        architecture: x64
    - script: |
        brew install coreutils
        brew install gettext && brew link gettext --force
        sudo pip3 install --upgrade pip setuptools wheel
        ./contrib/osx/make_osx
      enabled: true
      continueOnError: false
      failOnStderr: false
      displayName: 'Build MacOS binaries'
    - task: CopyFiles@2
      inputs:
        contents: dist/?(*.dmg|*.txt)
        targetFolder: $(Build.ArtifactStagingDirectory)
        flattenFolders: true
        OverWrite: true
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'build-macos'
        targetPath: $(Build.ArtifactStagingDirectory)
  - job: ProcessArtifacts
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn:
      - BuildLinuxBasedWindows
      - BuildSourceArchive
      - BuildMacOS11
      - Preparation
    variables:
      COMMIT_TAG: $[dependencies.Preparation.outputs['exportVars.COMMIT_TAG']]
      COMMIT_TAGGED: $[dependencies.Preparation.outputs['exportVars.COMMIT_TAGGED']]
      TAG_UNSTABLE: $[dependencies.Preparation.outputs['exportVars.TAG_UNSTABLE']]
    steps:
    - checkout: none
    - script: |
        echo "Commit COMMIT_TAG = $(COMMIT_TAG)"
        echo "Commit COMMIT_TAGGED = $(COMMIT_TAGGED)"
        echo "Commit TAG_UNSTABLE = $(TAG_UNSTABLE)"
    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'build-windows'
        targetPath: $(Build.ArtifactStagingDirectory)
    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'build-source'
        targetPath: $(Build.ArtifactStagingDirectory)
    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'build-macos'
        targetPath: $(Build.ArtifactStagingDirectory)
    - script: |
        cd $(Build.ArtifactStagingDirectory)
        sha256sum * > build-hashes.txt
      enabled: true
      continueOnError: false
      failOnStderr: false
      displayName: 'Checksum build artifacts'
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'all-build-files'
        targetPath: $(Build.ArtifactStagingDirectory)

  # This requires an extra github access token added. It's a lot of hassle and it's likely better
  # to just use the API and do it externally and manually.
  # - task: GitHubRelease@0
  #   inputs:
  #     gitHubConnection: github-releases
  #     repositoryName: rt121212121/electrumsv
  #     tag: $(COMMIT_TAG)
  #     tagSource: 'auto'
  #     isPreRelease: true
  #     target: $(Build.SourceVersion)
  #     addChangeLog: true
  #   enabled: true
  #   condition: |
  #     and(
  #       succeeded(),
  #       eq(variables['Build.Reason'], 'Manual'),
  #       eq(variables['Build.SourceBranch'], 'refs/heads/master'),
  #       eq(variables['COMMIT_TAGGED'], 'yes'),
  #       startsWith(variables['COMMIT_TAG'], 'sv-'),
  #       eq(variables['TAG_UNSTABLE'], 'yes')
  #     )
