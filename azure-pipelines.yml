# - Unable to get the prefix wildcard to work in the trigger branch include list, e.g. 'release-*' or 'release*' is invalid.
#   - Microsoft appear to force a branch naming based on '/', e.g. 'release/*' okay, 'release-*' not okay.
#   - This means that as we make new major level releases we will have to manually add those branches (or adopt Microsoft's policy).
# - 'failOnStdErr' flags unimportant things that are written to stderr, so cannot easily be enabled.
#   - This means that if one command fails it will proceed onto the next and fail that.
# - The Wine build docker image is specified by hash, with the intent that it ensures that what we get is what we uploaded to Docker Hub.
#   - Also tying it to the hash, ensures historical reproducibility and failure will be indicated by Docker image availability.
# - MacOS build errors in Calin's QR reader.

trigger:
  branches:
    include:
      - master

pr:
  - master

jobs:
- job: BuildLinuxBasedWindows
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: 3.6
      addToPath: true
      architecture: x64
  - script: |
      REPO_DESC=`git describe --tags --dirty --always --match sv-*`
      REPO_CLOSEST_TAG=`git describe --tags --abbrev=0 --match sv-*`
      # Only set this flag if the commit is on the tag.
      if [ "$REPO_DESC" == "$REPO_CLOSEST_TAG" ]
      then
        echo "##vso[task.setvariable variable=committag;isOutput=true]${REPO_CLOSEST_TAG:3}"
      else
        echo "##vso[task.setvariable variable=committag;isOutput=true]not-tagged"
      fi
    name: exportVars
    displayName: Export commit tag for dependent tasks
    enabled: true
    continueOnError: false
    failOnStderr: true
  - script: |
      sudo docker pull $(imageName)
      sudo docker run --name electrumsv-wine-builder-cont -v $PWD:/opt/wine64/drive_c/electrum --rm --workdir /opt/wine64/drive_c/electrum/contrib/build-wine $(imageName) ./build.sh
    displayName: 'Windows build'
    enabled: true
    continueOnError: false
    failOnStderr: false
  - task: CopyFiles@2
    inputs:
      contents: contrib/build-wine/dist/?(*.exe|*.txt)
      targetFolder: $(Build.ArtifactStagingDirectory)
      flattenFolders: true
      OverWrite: true
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'build-files-intermediate-windows'
      targetPath: $(Build.ArtifactStagingDirectory)
  variables:
    imageName: 'docker.io/electrumsv/electrumsv-wine-builder-img@sha256:8274d555237fc569f032006eccb7d76c1e2e4c9d9ca420d98a00efb527cce46e'
- job: BuildPythonPackages
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: 3.6
      addToPath: true
      architecture: x64
  - script: |
      sudo pip3 install --upgrade pip setuptools wheel
      ./contrib/make_packages
      ./contrib/make_tgz
    displayName: 'Build Python packages'
    enabled: true
    continueOnError: false
    failOnStderr: false
  - task: CopyFiles@2
    inputs:
      contents: dist/?(*.zip|*.gz)
      targetFolder: $(Build.ArtifactStagingDirectory)
      flattenFolders: true
      OverWrite: true
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'build-files-intermediate-packages'
      targetPath: $(Build.ArtifactStagingDirectory)
- job: BuildMacOS10_14
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: 3.6
      addToPath: true
      architecture: x64
  - script: |
      # Calin's QR reader requires SDK 10.14, which is not available in the default Xcode version.
      /bin/bash -c "sudo xcode-select -s /Applications/Xcode_10.1.app/Contents/Developer"
      sudo pip3 install --upgrade pip setuptools wheel
      brew install gettext && brew link gettext --force
      ./contrib/osx/make_osx
    enabled: true
    continueOnError: false
    failOnStderr: false
    displayName: 'Build MacOS binaries'
  - task: CopyFiles@2
    inputs:
      contents: dist/?(*.dmg|*.txt)
      targetFolder: $(Build.ArtifactStagingDirectory)
      flattenFolders: true
      OverWrite: true
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'build-files-intermediate-macos'
      targetPath: $(Build.ArtifactStagingDirectory)
- job: ProcessArtifacts
  dependsOn:
    - BuildLinuxBasedWindows
    - BuildPythonPackages
    - BuildMacOS10_14
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - checkout: none
  - script: |
      echo Running with commit tag $(commitTag)
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'build-files-intermediate-windows'
      targetPath: $(Build.ArtifactStagingDirectory)
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'build-files-intermediate-packages'
      targetPath: $(Build.ArtifactStagingDirectory)
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'build-files-intermediate-macos'
      targetPath: $(Build.ArtifactStagingDirectory)
  - script: |
      cd $(Build.ArtifactStagingDirectory)
      sha256sum * > build-hashes.txt
    enabled: true
    continueOnError: false
    failOnStderr: false
    displayName: 'Collect build artifacts'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'build-files'
      targetPath: $(Build.ArtifactStagingDirectory)
    condition: and(succeeded(), startsWith(variables['commitTag'], 'sv-'))
  variables:
    commitTag: $(dependencies.BuildLinuxBasedWindows.outputs['exportVars.committag'])
